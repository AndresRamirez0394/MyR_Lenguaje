
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVIDEAND BOOL CHAR COLON COMMA COMMENT CTEB CTEC CTEF CTEI DECREMENT DIVEQUAL DIVIDE DO DRAW ELSE EQ EQUALS FALSE FLOAT FOR FUNCTION GE GET GT ID IF INCREMENT INT LBRACE LBRACKET LE LETRERO LPAREN LT MAIN MINUS MINUSEQUAL NE OR OUT PERIOD PLUS PLUSEQUAL PROGRAMA RBRACE RBRACKET RETURN RPAREN SEMI START THEN TIMES TIMESEQUAL TO TRUE VOID WHILE\n    programa : PROGRAMA ID SEMI bloque main\n    \n    main : MAIN bloque_use\n    \n    bloque_use : LBRACE bloque RBRACE\n    \n    bloque : estatuto bloque\n           | empty\n\n    \n    estatuto : asigna\n             | asignavar\n             | asignaarr\n             | vararr\n             | var\n             | func\n             | ifelse\n             | while\n             | forloop\n             | write\n             | read\n             | fun_esp\n             | cvar\n             | cfunc\n    \n    var : type ID SEMI\n    \n    type : INT\n         | FLOAT\n         | CHAR\n    \n    \n    asigna : ID EQUALS lit SEMI\n\n    \n    asignavar : ID EQUALS expr SEMI\n    \n    lit : CTEI\n        | CTEF\n    \n    write : OUT LPAREN write_aux RPAREN SEMI\n\n    \n    write_aux : write_aux2\n              | write_aux2 COMMA write_aux\n\n    \n    write_aux2 : cvar\n               | LETRERO\n\n    \n    forloop : FOR asignavar forJump texp forQuad DO bloque_use fill_for\n    \n    forJump :\n    \n    forQuad : \n    \n    fill_for :\n    \n    ifelse : IF texp gotoQuadIf THEN bloque_use fill_if\n\n    \n    gotoQuadIf : \n    \n    fill_if :\n    \n    while : WHILE gotoQuadWhile LPAREN aexp RPAREN gotofQuadWhile DO bloque_use fill_while\n\n    \n    gotoQuadWhile :\n    \n    gotofQuadWhile : \n    \n    fill_while :\n    \n    cvar : ID\n         | ID LBRACKET expr RBRACKET \n\n    \n    vararr : type ID LBRACKET lit RBRACKET SEMI\n           | type ID LBRACKET expr RBRACKET SEMI\n    \n    asignaarr : ID LBRACKET expr RBRACKET EQUALS expr SEMI\n    \n    read : GET LPAREN read_aux RPAREN\n\n    \n    read_aux : ID\n             | ID COMMA read_aux \n\n    \n    body2 : LBRACE bloque end RBRACE \n    \n    end : \n    \n    body1 : LBRACE bloque RETURN RBRACE\n\n    \n    aexp : texp\n         | texp AND texp\n         | texp OR texp\n\n    \n    texp : expr\n         | expr LT expr\n         | expr GT expr\n         | expr LE expr\n         | expr GE expr\n         | expr EQ expr\n         | expr NE expr\n    \n    expr : term\n         | expr PLUS term\n         | expr MINUS term\n    \n    term : fact\n         | term TIMES fact\n         | term DIVIDE fact \n    \n    fact : LPAREN aexp RPAREN\n         | lit \n         | cvar\n         | cfunc\n    \n    cfunc : ID LPAREN cvar RPAREN SEMI\n          | ID LPAREN RPAREN SEMI\n    \n    func : FUNCTION type ID eraQuad param body1 fillFunc\n         | FUNCTION VOID ID eraQuad param body2 fillFunc\n    \n    funcVar : type ID\n    \n    eraQuad :\n    \n    fillFunc :\n    \n    param : LPAREN RPAREN\n          | LPAREN param_aux RPAREN\n    \n    param_aux : funcVar\n              | funcVar COMMA param_aux\n    \n    fun_esp : draw_line\n    \n    endfunc :\n    \n    draw_line : DRAW CTEI CTEI CTEI CTEI\n    \n    empty :\n    '
    
_lr_action_items = {'PROGRAMA':([0,],[2,]),'$end':([1,38,67,131,],[0,-1,-2,-3,]),'ID':([2,4,5,7,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,25,27,30,31,32,33,35,36,37,42,43,48,56,58,59,68,69,70,74,75,76,77,78,79,80,81,82,83,86,87,88,89,97,98,99,101,119,120,125,126,127,129,130,131,137,143,146,148,149,150,151,155,156,157,158,161,162,167,170,174,175,176,177,178,],[3,5,-44,5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,41,54,57,-86,-21,-22,-23,54,54,64,71,72,54,-34,64,95,5,54,-20,54,54,54,54,54,54,54,54,54,54,54,54,54,54,-24,-25,-45,-76,54,54,64,-49,95,54,-75,-3,-39,-28,-88,-46,-47,-81,5,166,-81,5,-37,-48,-77,-78,-36,-43,-33,-54,-52,-40,]),'SEMI':([3,41,46,47,49,50,51,52,53,54,61,62,66,100,101,114,115,116,117,118,124,130,132,133,140,147,],[4,70,-65,-68,-72,-73,-74,-26,-27,-44,97,98,101,130,-76,-66,-67,-69,-70,-71,143,-75,148,149,-45,161,]),'MAIN':([4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,30,40,70,97,98,99,101,126,130,131,137,143,146,148,149,150,156,158,161,162,167,170,174,175,176,177,178,],[-89,-44,39,-89,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-86,-4,-20,-24,-25,-45,-76,-49,-75,-3,-39,-28,-88,-46,-47,-81,-81,-37,-48,-77,-78,-36,-43,-33,-54,-52,-40,]),'FUNCTION':([4,5,7,9,10,11,12,13,14,15,16,17,18,19,20,21,22,30,68,70,97,98,99,101,126,130,131,137,143,146,148,149,150,151,156,157,158,161,162,167,170,174,175,176,177,178,],[24,-44,24,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-86,24,-20,-24,-25,-45,-76,-49,-75,-3,-39,-28,-88,-46,-47,-81,24,-81,24,-37,-48,-77,-78,-36,-43,-33,-54,-52,-40,]),'IF':([4,5,7,9,10,11,12,13,14,15,16,17,18,19,20,21,22,30,68,70,97,98,99,101,126,130,131,137,143,146,148,149,150,151,156,157,158,161,162,167,170,174,175,176,177,178,],[25,-44,25,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-86,25,-20,-24,-25,-45,-76,-49,-75,-3,-39,-28,-88,-46,-47,-81,25,-81,25,-37,-48,-77,-78,-36,-43,-33,-54,-52,-40,]),'WHILE':([4,5,7,9,10,11,12,13,14,15,16,17,18,19,20,21,22,30,68,70,97,98,99,101,126,130,131,137,143,146,148,149,150,151,156,157,158,161,162,167,170,174,175,176,177,178,],[26,-44,26,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-86,26,-20,-24,-25,-45,-76,-49,-75,-3,-39,-28,-88,-46,-47,-81,26,-81,26,-37,-48,-77,-78,-36,-43,-33,-54,-52,-40,]),'FOR':([4,5,7,9,10,11,12,13,14,15,16,17,18,19,20,21,22,30,68,70,97,98,99,101,126,130,131,137,143,146,148,149,150,151,156,157,158,161,162,167,170,174,175,176,177,178,],[27,-44,27,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-86,27,-20,-24,-25,-45,-76,-49,-75,-3,-39,-28,-88,-46,-47,-81,27,-81,27,-37,-48,-77,-78,-36,-43,-33,-54,-52,-40,]),'OUT':([4,5,7,9,10,11,12,13,14,15,16,17,18,19,20,21,22,30,68,70,97,98,99,101,126,130,131,137,143,146,148,149,150,151,156,157,158,161,162,167,170,174,175,176,177,178,],[28,-44,28,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-86,28,-20,-24,-25,-45,-76,-49,-75,-3,-39,-28,-88,-46,-47,-81,28,-81,28,-37,-48,-77,-78,-36,-43,-33,-54,-52,-40,]),'GET':([4,5,7,9,10,11,12,13,14,15,16,17,18,19,20,21,22,30,68,70,97,98,99,101,126,130,131,137,143,146,148,149,150,151,156,157,158,161,162,167,170,174,175,176,177,178,],[29,-44,29,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-86,29,-20,-24,-25,-45,-76,-49,-75,-3,-39,-28,-88,-46,-47,-81,29,-81,29,-37,-48,-77,-78,-36,-43,-33,-54,-52,-40,]),'INT':([4,5,7,9,10,11,12,13,14,15,16,17,18,19,20,21,22,24,30,68,70,97,98,99,101,126,130,131,135,137,143,146,148,149,150,151,156,157,158,161,162,165,167,170,174,175,176,177,178,],[31,-44,31,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,31,-86,31,-20,-24,-25,-45,-76,-49,-75,-3,31,-39,-28,-88,-46,-47,-81,31,-81,31,-37,-48,-77,31,-78,-36,-43,-33,-54,-52,-40,]),'FLOAT':([4,5,7,9,10,11,12,13,14,15,16,17,18,19,20,21,22,24,30,68,70,97,98,99,101,126,130,131,135,137,143,146,148,149,150,151,156,157,158,161,162,165,167,170,174,175,176,177,178,],[32,-44,32,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,32,-86,32,-20,-24,-25,-45,-76,-49,-75,-3,32,-39,-28,-88,-46,-47,-81,32,-81,32,-37,-48,-77,32,-78,-36,-43,-33,-54,-52,-40,]),'CHAR':([4,5,7,9,10,11,12,13,14,15,16,17,18,19,20,21,22,24,30,68,70,97,98,99,101,126,130,131,135,137,143,146,148,149,150,151,156,157,158,161,162,165,167,170,174,175,176,177,178,],[33,-44,33,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,33,-86,33,-20,-24,-25,-45,-76,-49,-75,-3,33,-39,-28,-88,-46,-47,-81,33,-81,33,-37,-48,-77,33,-78,-36,-43,-33,-54,-52,-40,]),'DRAW':([4,5,7,9,10,11,12,13,14,15,16,17,18,19,20,21,22,30,68,70,97,98,99,101,126,130,131,137,143,146,148,149,150,151,156,157,158,161,162,167,170,174,175,176,177,178,],[34,-44,34,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-86,34,-20,-24,-25,-45,-76,-49,-75,-3,-39,-28,-88,-46,-47,-81,34,-81,34,-37,-48,-77,-78,-36,-43,-33,-54,-52,-40,]),'EQUALS':([5,57,99,],[35,89,129,]),'LBRACKET':([5,41,54,64,],[36,69,86,86,]),'RBRACE':([5,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,30,40,68,70,97,98,99,101,102,126,130,131,137,143,146,148,149,150,156,157,158,161,162,167,168,170,171,173,174,175,176,177,178,],[-44,-89,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-86,-4,-89,-20,-24,-25,-45,-76,131,-49,-75,-3,-39,-28,-88,-46,-47,-81,-81,-89,-37,-48,-77,-78,-53,-36,176,177,-43,-33,-54,-52,-40,]),'RETURN':([5,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,30,40,70,97,98,99,101,126,130,131,137,143,146,148,149,150,151,156,158,161,162,163,167,170,174,175,176,177,178,],[-44,-89,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-86,-4,-20,-24,-25,-45,-76,-49,-75,-3,-39,-28,-88,-46,-47,-81,-89,-81,-37,-48,-77,171,-78,-36,-43,-33,-54,-52,-40,]),'LPAREN':([5,25,26,28,29,35,36,48,54,55,56,69,71,72,74,75,76,77,78,79,80,81,82,83,86,87,88,89,98,105,106,119,120,129,],[37,48,-41,58,59,48,48,48,37,87,-34,48,-80,-80,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-25,135,135,48,48,48,]),'VOID':([24,],[43,]),'CTEI':([25,34,35,36,48,56,60,69,74,75,76,77,78,79,80,81,82,83,86,87,88,89,96,98,119,120,128,129,],[52,60,52,52,52,-34,96,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,128,-25,52,52,146,52,]),'CTEF':([25,35,36,48,56,69,74,75,76,77,78,79,80,81,82,83,86,87,88,89,98,119,120,129,],[53,53,53,53,-34,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,-25,53,53,53,]),'RPAREN':([37,45,46,47,49,50,51,52,53,54,64,65,84,85,90,91,92,93,94,95,101,108,109,110,111,112,113,114,115,116,117,118,122,130,135,138,139,140,144,145,153,154,166,172,],[66,-58,-65,-68,-72,-73,-74,-26,-27,-44,-44,100,118,-55,124,-29,-31,-32,126,-50,-76,-59,-60,-61,-62,-63,-64,-66,-67,-69,-70,-71,141,-75,152,-56,-57,-45,-30,-51,164,-84,-79,-85,]),'LBRACE':([39,107,134,136,152,160,164,169,],[68,68,151,157,-82,68,-83,68,]),'THEN':([44,45,46,47,49,50,51,52,53,54,73,101,108,109,110,111,112,113,114,115,116,117,118,130,140,],[-38,-58,-65,-68,-72,-73,-74,-26,-27,-44,107,-76,-59,-60,-61,-62,-63,-64,-66,-67,-69,-70,-71,-75,-45,]),'AND':([45,46,47,49,50,51,52,53,54,85,101,108,109,110,111,112,113,114,115,116,117,118,130,140,],[-58,-65,-68,-72,-73,-74,-26,-27,-44,119,-76,-59,-60,-61,-62,-63,-64,-66,-67,-69,-70,-71,-75,-45,]),'OR':([45,46,47,49,50,51,52,53,54,85,101,108,109,110,111,112,113,114,115,116,117,118,130,140,],[-58,-65,-68,-72,-73,-74,-26,-27,-44,120,-76,-59,-60,-61,-62,-63,-64,-66,-67,-69,-70,-71,-75,-45,]),'DO':([45,46,47,49,50,51,52,53,54,101,108,109,110,111,112,113,114,115,116,117,118,123,130,140,141,142,159,],[-58,-65,-68,-72,-73,-74,-26,-27,-44,-76,-59,-60,-61,-62,-63,-64,-66,-67,-69,-70,-71,-35,-75,-45,-42,160,169,]),'LT':([45,46,47,49,50,51,52,53,54,101,114,115,116,117,118,130,140,],[74,-65,-68,-72,-73,-74,-26,-27,-44,-76,-66,-67,-69,-70,-71,-75,-45,]),'GT':([45,46,47,49,50,51,52,53,54,101,114,115,116,117,118,130,140,],[75,-65,-68,-72,-73,-74,-26,-27,-44,-76,-66,-67,-69,-70,-71,-75,-45,]),'LE':([45,46,47,49,50,51,52,53,54,101,114,115,116,117,118,130,140,],[76,-65,-68,-72,-73,-74,-26,-27,-44,-76,-66,-67,-69,-70,-71,-75,-45,]),'GE':([45,46,47,49,50,51,52,53,54,101,114,115,116,117,118,130,140,],[77,-65,-68,-72,-73,-74,-26,-27,-44,-76,-66,-67,-69,-70,-71,-75,-45,]),'EQ':([45,46,47,49,50,51,52,53,54,101,114,115,116,117,118,130,140,],[78,-65,-68,-72,-73,-74,-26,-27,-44,-76,-66,-67,-69,-70,-71,-75,-45,]),'NE':([45,46,47,49,50,51,52,53,54,101,114,115,116,117,118,130,140,],[79,-65,-68,-72,-73,-74,-26,-27,-44,-76,-66,-67,-69,-70,-71,-75,-45,]),'PLUS':([45,46,47,49,50,51,52,53,54,61,62,63,101,103,104,108,109,110,111,112,113,114,115,116,117,118,121,130,140,147,],[80,-65,-68,-72,-73,-74,-26,-27,-44,-72,80,80,-76,-72,80,80,80,80,80,80,80,-66,-67,-69,-70,-71,80,-75,-45,80,]),'MINUS':([45,46,47,49,50,51,52,53,54,61,62,63,101,103,104,108,109,110,111,112,113,114,115,116,117,118,121,130,140,147,],[81,-65,-68,-72,-73,-74,-26,-27,-44,-72,81,81,-76,-72,81,81,81,81,81,81,81,-66,-67,-69,-70,-71,81,-75,-45,81,]),'RBRACKET':([46,47,49,50,51,52,53,54,63,101,103,104,114,115,116,117,118,121,130,140,],[-65,-68,-72,-73,-74,-26,-27,-44,99,-76,132,133,-66,-67,-69,-70,-71,140,-75,-45,]),'TIMES':([46,47,49,50,51,52,53,54,61,101,103,114,115,116,117,118,130,140,],[82,-68,-72,-73,-74,-26,-27,-44,-72,-76,-72,82,82,-69,-70,-71,-75,-45,]),'DIVIDE':([46,47,49,50,51,52,53,54,61,101,103,114,115,116,117,118,130,140,],[83,-68,-72,-73,-74,-26,-27,-44,-72,-76,-72,83,83,-69,-70,-71,-75,-45,]),'LETRERO':([58,125,],[93,93,]),'COMMA':([64,91,92,93,95,140,154,166,],[-44,125,-31,-32,127,-45,165,-79,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programa':([0,],[1,]),'bloque':([4,7,68,151,157,],[6,40,102,163,168,]),'estatuto':([4,7,68,151,157,],[7,7,7,7,7,]),'empty':([4,7,68,151,157,],[8,8,8,8,8,]),'asigna':([4,7,68,151,157,],[9,9,9,9,9,]),'asignavar':([4,7,27,68,151,157,],[10,10,56,10,10,10,]),'asignaarr':([4,7,68,151,157,],[11,11,11,11,11,]),'vararr':([4,7,68,151,157,],[12,12,12,12,12,]),'var':([4,7,68,151,157,],[13,13,13,13,13,]),'func':([4,7,68,151,157,],[14,14,14,14,14,]),'ifelse':([4,7,68,151,157,],[15,15,15,15,15,]),'while':([4,7,68,151,157,],[16,16,16,16,16,]),'forloop':([4,7,68,151,157,],[17,17,17,17,17,]),'write':([4,7,68,151,157,],[18,18,18,18,18,]),'read':([4,7,68,151,157,],[19,19,19,19,19,]),'fun_esp':([4,7,68,151,157,],[20,20,20,20,20,]),'cvar':([4,7,25,35,36,37,48,58,68,69,74,75,76,77,78,79,80,81,82,83,86,87,88,89,119,120,125,129,151,157,],[21,21,50,50,50,65,50,92,21,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,92,50,21,21,]),'cfunc':([4,7,25,35,36,48,68,69,74,75,76,77,78,79,80,81,82,83,86,87,88,89,119,120,129,151,157,],[22,22,51,51,51,51,22,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,22,22,]),'type':([4,7,24,68,135,151,157,165,],[23,23,42,23,155,23,23,155,]),'draw_line':([4,7,68,151,157,],[30,30,30,30,30,]),'main':([6,],[38,]),'texp':([25,48,87,88,119,120,],[44,85,85,123,138,139,]),'expr':([25,35,36,48,69,74,75,76,77,78,79,86,87,88,89,119,120,129,],[45,62,63,45,104,108,109,110,111,112,113,121,45,45,62,45,45,147,]),'term':([25,35,36,48,69,74,75,76,77,78,79,80,81,86,87,88,89,119,120,129,],[46,46,46,46,46,46,46,46,46,46,46,114,115,46,46,46,46,46,46,46,]),'fact':([25,35,36,48,69,74,75,76,77,78,79,80,81,82,83,86,87,88,89,119,120,129,],[47,47,47,47,47,47,47,47,47,47,47,47,47,116,117,47,47,47,47,47,47,47,]),'lit':([25,35,36,48,69,74,75,76,77,78,79,80,81,82,83,86,87,88,89,119,120,129,],[49,61,49,49,103,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'gotoQuadWhile':([26,],[55,]),'bloque_use':([39,107,160,169,],[67,137,170,174,]),'gotoQuadIf':([44,],[73,]),'aexp':([48,87,],[84,122,]),'forJump':([56,],[88,]),'write_aux':([58,125,],[90,144,]),'write_aux2':([58,125,],[91,91,]),'read_aux':([59,127,],[94,145,]),'eraQuad':([71,72,],[105,106,]),'param':([105,106,],[134,136,]),'forQuad':([123,],[142,]),'body1':([134,],[150,]),'param_aux':([135,165,],[153,172,]),'funcVar':([135,165,],[154,154,]),'body2':([136,],[156,]),'fill_if':([137,],[158,]),'gotofQuadWhile':([141,],[159,]),'fillFunc':([150,156,],[162,167,]),'end':([168,],[173,]),'fill_for':([170,],[175,]),'fill_while':([174,],[178,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programa","S'",1,None,None,None),
  ('programa -> PROGRAMA ID SEMI bloque main','programa',5,'p_programa','ParLex.py',285),
  ('main -> MAIN bloque_use','main',2,'p_main','ParLex.py',293),
  ('bloque_use -> LBRACE bloque RBRACE','bloque_use',3,'p_bloque_use','ParLex.py',304),
  ('bloque -> estatuto bloque','bloque',2,'p_bloque','ParLex.py',310),
  ('bloque -> empty','bloque',1,'p_bloque','ParLex.py',311),
  ('estatuto -> asigna','estatuto',1,'p_estatuto','ParLex.py',318),
  ('estatuto -> asignavar','estatuto',1,'p_estatuto','ParLex.py',319),
  ('estatuto -> asignaarr','estatuto',1,'p_estatuto','ParLex.py',320),
  ('estatuto -> vararr','estatuto',1,'p_estatuto','ParLex.py',321),
  ('estatuto -> var','estatuto',1,'p_estatuto','ParLex.py',322),
  ('estatuto -> func','estatuto',1,'p_estatuto','ParLex.py',323),
  ('estatuto -> ifelse','estatuto',1,'p_estatuto','ParLex.py',324),
  ('estatuto -> while','estatuto',1,'p_estatuto','ParLex.py',325),
  ('estatuto -> forloop','estatuto',1,'p_estatuto','ParLex.py',326),
  ('estatuto -> write','estatuto',1,'p_estatuto','ParLex.py',327),
  ('estatuto -> read','estatuto',1,'p_estatuto','ParLex.py',328),
  ('estatuto -> fun_esp','estatuto',1,'p_estatuto','ParLex.py',329),
  ('estatuto -> cvar','estatuto',1,'p_estatuto','ParLex.py',330),
  ('estatuto -> cfunc','estatuto',1,'p_estatuto','ParLex.py',331),
  ('var -> type ID SEMI','var',3,'p_var','ParLex.py',337),
  ('type -> INT','type',1,'p_type','ParLex.py',355),
  ('type -> FLOAT','type',1,'p_type','ParLex.py',356),
  ('type -> CHAR','type',1,'p_type','ParLex.py',357),
  ('asigna -> ID EQUALS lit SEMI','asigna',4,'p_asigna','ParLex.py',364),
  ('asignavar -> ID EQUALS expr SEMI','asignavar',4,'p_asignaVar','ParLex.py',380),
  ('lit -> CTEI','lit',1,'p_literals','ParLex.py',394),
  ('lit -> CTEF','lit',1,'p_literals','ParLex.py',395),
  ('write -> OUT LPAREN write_aux RPAREN SEMI','write',5,'p_write','ParLex.py',401),
  ('write_aux -> write_aux2','write_aux',1,'p_write_aux','ParLex.py',415),
  ('write_aux -> write_aux2 COMMA write_aux','write_aux',3,'p_write_aux','ParLex.py',416),
  ('write_aux2 -> cvar','write_aux2',1,'p_write_aux2','ParLex.py',428),
  ('write_aux2 -> LETRERO','write_aux2',1,'p_write_aux2','ParLex.py',429),
  ('forloop -> FOR asignavar forJump texp forQuad DO bloque_use fill_for','forloop',8,'p_forloop','ParLex.py',437),
  ('forJump -> <empty>','forJump',0,'p_forJump','ParLex.py',442),
  ('forQuad -> <empty>','forQuad',0,'p_forQuad','ParLex.py',448),
  ('fill_for -> <empty>','fill_for',0,'p_fill_for','ParLex.py',455),
  ('ifelse -> IF texp gotoQuadIf THEN bloque_use fill_if','ifelse',6,'p_ifelse','ParLex.py',465),
  ('gotoQuadIf -> <empty>','gotoQuadIf',0,'p_gotoQuad','ParLex.py',472),
  ('fill_if -> <empty>','fill_if',0,'p_fill_if','ParLex.py',479),
  ('while -> WHILE gotoQuadWhile LPAREN aexp RPAREN gotofQuadWhile DO bloque_use fill_while','while',9,'p_while','ParLex.py',487),
  ('gotoQuadWhile -> <empty>','gotoQuadWhile',0,'p_gotoQuadWhile','ParLex.py',492),
  ('gotofQuadWhile -> <empty>','gotofQuadWhile',0,'p_gotofQuadWhile','ParLex.py',498),
  ('fill_while -> <empty>','fill_while',0,'p_fill_while','ParLex.py',505),
  ('cvar -> ID','cvar',1,'p_cvar','ParLex.py',516),
  ('cvar -> ID LBRACKET expr RBRACKET','cvar',4,'p_cvar','ParLex.py',517),
  ('vararr -> type ID LBRACKET lit RBRACKET SEMI','vararr',6,'p_var_array','ParLex.py',533),
  ('vararr -> type ID LBRACKET expr RBRACKET SEMI','vararr',6,'p_var_array','ParLex.py',534),
  ('asignaarr -> ID LBRACKET expr RBRACKET EQUALS expr SEMI','asignaarr',7,'p_assign_array','ParLex.py',545),
  ('read -> GET LPAREN read_aux RPAREN','read',4,'p_read','ParLex.py',561),
  ('read_aux -> ID','read_aux',1,'p_read_aux','ParLex.py',570),
  ('read_aux -> ID COMMA read_aux','read_aux',3,'p_read_aux','ParLex.py',571),
  ('body2 -> LBRACE bloque end RBRACE','body2',4,'p_body2','ParLex.py',578),
  ('end -> <empty>','end',0,'p_end','ParLex.py',582),
  ('body1 -> LBRACE bloque RETURN RBRACE','body1',4,'p_body1','ParLex.py',589),
  ('aexp -> texp','aexp',1,'p_aexp','ParLex.py',603),
  ('aexp -> texp AND texp','aexp',3,'p_aexp','ParLex.py',604),
  ('aexp -> texp OR texp','aexp',3,'p_aexp','ParLex.py',605),
  ('texp -> expr','texp',1,'p_texp','ParLex.py',622),
  ('texp -> expr LT expr','texp',3,'p_texp','ParLex.py',623),
  ('texp -> expr GT expr','texp',3,'p_texp','ParLex.py',624),
  ('texp -> expr LE expr','texp',3,'p_texp','ParLex.py',625),
  ('texp -> expr GE expr','texp',3,'p_texp','ParLex.py',626),
  ('texp -> expr EQ expr','texp',3,'p_texp','ParLex.py',627),
  ('texp -> expr NE expr','texp',3,'p_texp','ParLex.py',628),
  ('expr -> term','expr',1,'p_expr','ParLex.py',645),
  ('expr -> expr PLUS term','expr',3,'p_expr','ParLex.py',646),
  ('expr -> expr MINUS term','expr',3,'p_expr','ParLex.py',647),
  ('term -> fact','term',1,'p_term','ParLex.py',666),
  ('term -> term TIMES fact','term',3,'p_term','ParLex.py',667),
  ('term -> term DIVIDE fact','term',3,'p_term','ParLex.py',668),
  ('fact -> LPAREN aexp RPAREN','fact',3,'p_fact','ParLex.py',685),
  ('fact -> lit','fact',1,'p_fact','ParLex.py',686),
  ('fact -> cvar','fact',1,'p_fact','ParLex.py',687),
  ('fact -> cfunc','fact',1,'p_fact','ParLex.py',688),
  ('cfunc -> ID LPAREN cvar RPAREN SEMI','cfunc',5,'p_cfunc','ParLex.py',698),
  ('cfunc -> ID LPAREN RPAREN SEMI','cfunc',4,'p_cfunc','ParLex.py',699),
  ('func -> FUNCTION type ID eraQuad param body1 fillFunc','func',7,'p_func','ParLex.py',718),
  ('func -> FUNCTION VOID ID eraQuad param body2 fillFunc','func',7,'p_func','ParLex.py',719),
  ('funcVar -> type ID','funcVar',2,'p_funcVar','ParLex.py',730),
  ('eraQuad -> <empty>','eraQuad',0,'p_eraQuad','ParLex.py',742),
  ('fillFunc -> <empty>','fillFunc',0,'p_fillFunc','ParLex.py',749),
  ('param -> LPAREN RPAREN','param',2,'p_param','ParLex.py',760),
  ('param -> LPAREN param_aux RPAREN','param',3,'p_param','ParLex.py',761),
  ('param_aux -> funcVar','param_aux',1,'p_param_aux','ParLex.py',766),
  ('param_aux -> funcVar COMMA param_aux','param_aux',3,'p_param_aux','ParLex.py',767),
  ('fun_esp -> draw_line','fun_esp',1,'p_fun_esp','ParLex.py',773),
  ('endfunc -> <empty>','endfunc',0,'p_endfunc','ParLex.py',778),
  ('draw_line -> DRAW CTEI CTEI CTEI CTEI','draw_line',5,'p_draw_line','ParLex.py',786),
  ('empty -> <empty>','empty',0,'p_empty','ParLex.py',796),
]
